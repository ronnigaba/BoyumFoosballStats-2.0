// This file was auto-generated by ML.NET Model Builder. 

using BoyumFoosballStats_2._0.Shared;
using BoyumFoosballStats.BlobStorage;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace BoyumFoosballStats_Ai
{
    public partial class MatchOutcomeModel
    {
        /// <summary>
        /// model input class for MatchOutcomeModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"GrayDefender")]
            public float GrayDefender { get; set; }

            [ColumnName(@"GrayAttacker")]
            public float GrayAttacker { get; set; }

            [ColumnName(@"BlackDefender")]
            public float BlackDefender { get; set; }

            [ColumnName(@"BlackAttacker")]
            public float BlackAttacker { get; set; }

            [ColumnName(@"Winner")]
            public float Winner { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MatchOutcomeModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            public float Score { get; set; }
        }
        #endregion
        
        private ITransformer? _mlModel;

        public PredictionEngine<ModelInput, ModelOutput>? PredictEngine;
        private readonly IAzureBlobStorageHelper _blobStorageHelper;

        public MatchOutcomeModel(IAzureBlobStorageHelper blobStorageHelper, string modelFileName = "MatchOutcomeModel.zip")
        {
            ModelFileName = modelFileName;
            _blobStorageHelper = blobStorageHelper;
        }

        public string ModelFileName { get; set; }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// 0 is black 1 is gray - the closer to 0 or 1 the more likely that result is true.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public async Task<ModelOutput> Predict(ModelInput input)
        {
            if (PredictEngine == null)
            {
                await CreatePredictEngine(ModelFileName);
            }
            return PredictEngine!.Predict(input);
        }

        private async Task CreatePredictEngine(string modelFileName)
        {
            var mlContext = new MLContext();
            var stream = await _blobStorageHelper.GetFileStreamAsync(modelFileName);
            if (_mlModel == null)
            {
                _mlModel = mlContext.Model.Load(stream, out var _);
            }
            PredictEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(_mlModel);
        }
    }
}
